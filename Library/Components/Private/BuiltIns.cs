/*
 * BuiltIns.cs --
 *
 * Copyright (c) 2007-2012 by Joe Mistachkin.  All rights reserved.
 *
 * See the file "license.terms" for information on usage and redistribution of
 * this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @(#) $Id: $
 */

/* WARNING: DO NOT EDIT THIS FILE, IT IS GENERATED BY A SCRIPT. */

using System;
using Eagle._Attributes;
using Eagle._Components.Public;

namespace Eagle._Components.Private
{
    [ObjectId("06b0577f-3c89-4398-8e1b-0e1f1f36e47d")]
    internal static class BuiltIns
    {
        #region Private Data
        private static readonly object syncRoot = new object();

        ///////////////////////////////////////////////////////////////////////

        #region Built-In Command Data
        private static Type[] commandTypes = {
            typeof(_Commands.After),
            typeof(_Commands.Append),
            typeof(_Commands.Apply),
            typeof(_Commands.Array),
            typeof(_Commands.Base64),
            typeof(_Commands.Bgerror),
            typeof(_Commands.Break),
#if CALLBACK_QUEUE
            typeof(_Commands.Callback),
#else
            /* Callback */ null,
#endif
            typeof(_Commands.Catch),
            typeof(_Commands.Cd),
            typeof(_Commands.Clock),
            typeof(_Commands.Close),
            typeof(_Commands.Concat),
            typeof(_Commands.Continue),
            typeof(_Commands.Debug),
            typeof(_Commands.Do),
            typeof(_Commands.Downlevel),
            typeof(_Commands.Eof),
            typeof(_Commands.Error),
            typeof(_Commands.Eval),
            typeof(_Commands.Exec),
            typeof(_Commands.Exit),
            typeof(_Commands.Expr),
            typeof(_Commands.Fblocked),
            typeof(_Commands.Fconfigure),
            typeof(_Commands.Fcopy),
            typeof(_Commands.Flush),
            typeof(_Commands.For),
            typeof(_Commands.Foreach),
            typeof(_Commands.Format),
            typeof(_Commands.Fpclassify),
#if OBSOLETE
            typeof(_Commands.Getf),
#else
            /* Getf */ null,
#endif
            typeof(_Commands.Gets),
            typeof(_Commands.Glob),
            typeof(_Commands.Global),
            typeof(_Commands.Host),
            typeof(_Commands.If),
            typeof(_Commands.Incr),
            typeof(_Commands.Info),
            typeof(_Commands.Interp),
            typeof(_Commands.Invoke),
            typeof(_Commands.Join),
            typeof(_Commands.Kill),
            typeof(_Commands.Lappend),
            typeof(_Commands.Lassign),
            typeof(_Commands.Lget),
#if EMIT && NATIVE && LIBRARY
            typeof(_Commands.Library),
#else
            /* Library */ null,
#endif
            typeof(_Commands.Lindex),
            typeof(_Commands.Linsert),
            typeof(_Commands.List),
            typeof(_Commands.Llength),
            typeof(_Commands.Lmap),
            typeof(_Commands.Load),
            typeof(_Commands.Lrange),
            typeof(_Commands.Lremove),
            typeof(_Commands.Lrepeat),
            typeof(_Commands.Lreplace),
            typeof(_Commands.Lreverse),
            typeof(_Commands.Lsearch),
            typeof(_Commands.Lset),
            typeof(_Commands.Lsort),
            typeof(_Commands.Namespace1),
            typeof(_Commands.Namespace2),
            typeof(_Commands.Napply),
            typeof(_Commands.Nop),
            typeof(_Commands.Nproc),
            typeof(_Commands.Object),
            typeof(_Commands.Open),
            typeof(_Commands.Package),
            typeof(_Commands.Parse),
            typeof(_Commands.Pid),
            typeof(_Commands.Proc),
            typeof(_Commands.Puts),
            typeof(_Commands.Pwd),
            typeof(_Commands.Read),
            typeof(_Commands.Regexp),
            typeof(_Commands.Regsub),
            typeof(_Commands.Rename),
            typeof(_Commands.Return),
            typeof(_Commands.Scope),
            typeof(_Commands.Seek),
            typeof(_Commands.Set),
#if OBSOLETE
            typeof(_Commands.Setf),
#else
            /* Setf */ null,
#endif
#if NETWORK
            typeof(_Commands.Socket),
#else
            /* Socket */ null,
#endif
            typeof(_Commands.Source),
            typeof(_Commands.Split),
#if DATA
            typeof(_Commands.Sql),
#else
            /* Sql */ null,
#endif
            typeof(_Commands.Subst),
            typeof(_Commands.Switch),
#if NATIVE && TCL
            typeof(_Commands.Tcl),
#else
            /* Tcl */ null,
#endif
            typeof(_Commands.Tell),
            typeof(_Commands.Test1),
            typeof(_Commands.Test2),
            typeof(_Commands.Throw),
            typeof(_Commands.Time),
            typeof(_Commands.Truncate),
            typeof(_Commands.Try),
            typeof(_Commands.Unload),
            typeof(_Commands.Unset),
#if OBSOLETE
            typeof(_Commands.Unsetf),
#else
            /* Unsetf */ null,
#endif
            typeof(_Commands.Update),
            typeof(_Commands.Uplevel),
            typeof(_Commands.Upvar),
            typeof(_Commands.Vwait),
            typeof(_Commands.While),
#if XML
            typeof(_Commands.Xml),
#else
            /* Xml */ null,
#endif
            typeof(_Commands._Encoding),
            typeof(_Commands._File),
            typeof(_Commands._Guid),
            typeof(_Commands._Hash),
            typeof(_Commands._String),
            typeof(_Commands._Uri),
            typeof(_Commands._Variable),
            typeof(_Commands._Version)
        };

        ///////////////////////////////////////////////////////////////////////

        private static Guid?[] commandIds = {
            /* After */ new Guid("4f867f2c-e65f-48d8-bf81-e794d10f7466"),
            /* Append */ new Guid("c507edec-2507-4632-963f-2a0ce5d6373d"),
            /* Apply */ new Guid("2bf60b1f-86bd-4271-952a-847b72b613c4"),
            /* Array */ new Guid("fe8bac16-d7a1-4b29-b4a1-7948ee4d9611"),
            /* Base64 */ new Guid("b2cf12bb-e35a-4039-9736-3da91e590777"),
            /* Bgerror */ new Guid("ed419ba9-aec5-4c49-a9a7-b41ed6b6eda0"),
            /* Break */ new Guid("260b4f9b-3805-42ea-96ac-266b29876417"),
            /* Callback */ new Guid("7a66999b-d92f-4884-bf28-1ee7d7aa52ea"),
            /* Catch */ new Guid("382b9037-4351-47c7-a9a6-e66bcbfe284d"),
            /* Cd */ new Guid("295be8e8-f85f-4e5a-a937-cece2660e903"),
            /* Clock */ new Guid("6715457a-62f1-4865-a00f-b3dd4aeb1d9c"),
            /* Close */ new Guid("0f2baa09-c2f7-4241-8435-5e407b7243d2"),
            /* Concat */ new Guid("6f84a512-f073-4700-b10e-7bd8d680aec0"),
            /* Continue */ new Guid("fedc53dc-e8c3-4892-8d1d-ef788baf194c"),
            /* Debug */ new Guid("8d2559ac-e4e4-41c4-8183-52c90008d25f"),
            /* Do */ new Guid("8ba664e1-10b3-4805-91e4-44ebabcdee15"),
            /* Downlevel */ new Guid("aa52dc76-1f0e-4a35-9ab9-eb52a7e6416f"),
            /* Eof */ new Guid("045aa0b9-a004-4848-b438-5e7ba3c28de3"),
            /* Error */ new Guid("fe60e0b8-3d89-4c48-9115-c02b9917424b"),
            /* Eval */ new Guid("2c86a842-a633-4863-a5d4-14f36f1365ed"),
            /* Exec */ new Guid("f622148a-93e0-4fbc-9645-e2ead4e5483b"),
            /* Exit */ new Guid("c950492b-f20d-41b8-8a6f-b4c2ce7cbba6"),
            /* Expr */ new Guid("07c8ff7e-4727-4dbb-8aa9-9d8915e16e61"),
            /* Fblocked */ new Guid("bc243857-822c-41ed-b6f3-32c17530665e"),
            /* Fconfigure */ new Guid("fde0d977-c772-4db3-9d81-3fa24d760166"),
            /* Fcopy */ new Guid("172e9e19-c6c3-44ee-9ff7-df5b72c0decd"),
            /* Flush */ new Guid("5a54aacb-f9b0-4b26-9f72-44ae4aa82441"),
            /* For */ new Guid("5ca5bf1e-8f0d-4b3e-a836-3dcf89b990eb"),
            /* Foreach */ new Guid("7aa801c2-9179-4726-a536-704063349abd"),
            /* Format */ new Guid("617d524a-6567-46d1-bdf4-5814f08e9558"),
            /* Fpclassify */ new Guid("fcf8ffd4-41d5-4956-96f4-db61570d0c94"),
            /* Getf */ new Guid("ac0a9ff6-87a3-49ed-8402-b2ab7e40aa32"),
            /* Gets */ new Guid("bfc8553d-5fb7-4f5c-9eba-4957473258ef"),
            /* Glob */ new Guid("92dc78d3-6dce-4f68-9459-9d3510b1ce7d"),
            /* Global */ new Guid("1cd4e351-10d3-4e53-bcfa-6d7e09e41184"),
            /* Host */ new Guid("861cf95e-54ea-41db-9be3-16908ab0ec25"),
            /* If */ new Guid("a08efef8-37e2-4abd-8128-b0a16ce2b8a1"),
            /* Incr */ new Guid("e620e38f-fe66-42ca-8889-3bcb0db3d62c"),
            /* Info */ new Guid("6fd06e1a-4558-4264-88aa-a3121ed6232e"),
            /* Interp */ new Guid("f83b2063-cf1f-428f-9cb9-7a1862a69960"),
            /* Invoke */ new Guid("359209a1-55b6-4fe9-a4cd-4e4647f84e57"),
            /* Join */ new Guid("a9db88b0-8f74-46c2-9615-c5e7884d1eba"),
            /* Kill */ new Guid("0fa1453c-4d4b-4141-af47-68197f25eee7"),
            /* Lappend */ new Guid("1c359f9f-7a48-41e9-8897-f7a0464e8be0"),
            /* Lassign */ new Guid("b19de186-5d3e-4543-82fe-2d3b9355dc4a"),
            /* Lget */ new Guid("55e4e145-6aa0-47d8-8a1c-c1c50d9d459e"),
            /* Library */ new Guid("a4d151e8-05d7-4051-9dc3-80665197ccd5"),
            /* Lindex */ new Guid("e60c0a62-397d-42cf-90d2-62be391062b3"),
            /* Linsert */ new Guid("2d555605-3100-483c-950b-c6e4e87446be"),
            /* List */ new Guid("5e0a255f-9c13-4239-bf86-299606048791"),
            /* Llength */ new Guid("991f4348-fbe2-47cb-b7b5-8425208ad3e4"),
            /* Lmap */ new Guid("59e5c17e-d957-4bec-948c-7bce0e439e82"),
            /* Load */ new Guid("eba460e1-048f-409a-a18c-70c5dc6aad6b"),
            /* Lrange */ new Guid("dcf266a2-0a90-436d-bd0f-2995160bc6dd"),
            /* Lremove */ new Guid("05e18629-7a6d-4d0f-9406-4aae8e99e666"),
            /* Lrepeat */ new Guid("f42e4182-eb1b-4951-924b-f390391ccde2"),
            /* Lreplace */ new Guid("5525590c-6517-4ea5-bb16-520ec34a0c4d"),
            /* Lreverse */ new Guid("21659c71-1b4b-4846-b6c0-38b4e2eb3aa7"),
            /* Lsearch */ new Guid("3e5dfc83-29bb-44a5-86c4-e78c0b7f21f0"),
            /* Lset */ new Guid("16a4192b-599c-4b6c-a09e-b932a710e2bb"),
            /* Lsort */ new Guid("f4947321-92bf-42a3-8e87-9b562a39d9f4"),
            /* Namespace1 */ new Guid("dbf1b8e2-0eb9-4246-ba2c-cfef01861d1d"),
            /* Namespace2 */ new Guid("3f2b8b9a-c7c6-4eae-b88b-2a99b3c97591"),
            /* Napply */ new Guid("86d11eee-7c32-4b07-95fb-11536876ed67"),
            /* Nop */ new Guid("500d712c-73cf-4a6c-8929-aee59e137047"),
            /* Nproc */ new Guid("2039903a-b5fc-4afa-a43e-2d20d31c2f61"),
            /* Object */ new Guid("95dc42f9-d1f9-467b-acdc-3312d4bcdfee"),
            /* Open */ new Guid("04da529a-10c9-4e92-b45e-cb6ae50e2c3d"),
            /* Package */ new Guid("c8fd57c0-20b3-4594-a5a7-919d6f9a8272"),
            /* Parse */ new Guid("a4841c1c-f336-4060-9d1a-0e8544a42bd0"),
            /* Pid */ new Guid("0c787fdb-c8ee-4bee-b4a0-08cb212e4db6"),
            /* Proc */ new Guid("4fdd1172-4105-4b45-864e-30ca1b70e6c6"),
            /* Puts */ new Guid("646d87e5-b37f-46e4-a8d7-1b8e70234d93"),
            /* Pwd */ new Guid("f73d9296-ae5b-4faf-8ebb-12305f43a4f5"),
            /* Read */ new Guid("8bde05f7-44aa-4d1c-a350-15c02319305a"),
            /* Regexp */ new Guid("3b73b31e-24ef-4161-9213-ebf943c0a628"),
            /* Regsub */ new Guid("2d0df297-03b8-4375-bd55-e3d9abd31a94"),
            /* Rename */ new Guid("fe410cf6-1f44-47d5-a9dc-613770302383"),
            /* Return */ new Guid("a54f8720-ba76-476c-91b1-3f140d587c70"),
            /* Scope */ new Guid("39023a46-960b-48bc-9139-55d6a2416f50"),
            /* Seek */ new Guid("c54bfc27-25d6-4467-9d26-a7868236196e"),
            /* Set */ new Guid("a183b0df-8f44-4e9a-955a-ebd79edcfd63"),
            /* Setf */ new Guid("7c8c73c9-41f9-496f-b1a5-1b4a9aa421c4"),
            /* Socket */ new Guid("2cb67080-894d-4232-a2d9-ae2a65da012e"),
            /* Source */ new Guid("076f3c98-c556-4145-aba5-5aa440040581"),
            /* Split */ new Guid("870fdad9-4698-4b0a-863d-8b9e0fe699ca"),
            /* Sql */ new Guid("dbc78d04-325d-4805-a118-3cfeeddfb8fc"),
            /* Subst */ new Guid("3bd40041-0cbc-47c3-8624-518b8fd6f0a3"),
            /* Switch */ new Guid("b4d8bb06-f6bf-4343-8b8a-b00184c14aa3"),
            /* Tcl */ new Guid("74ca173d-5378-4eb2-9d7c-4952ce598b33"),
            /* Tell */ new Guid("d7e8903f-20d8-48ac-b454-33ab805006f6"),
            /* Test1 */ new Guid("f20c521d-e16e-43fa-a050-ecf96c93bbdd"),
            /* Test2 */ new Guid("a382feba-f2ff-4596-b4c7-81dfa628733b"),
            /* Throw */ new Guid("c51886a9-e2d6-4cb9-ab39-9258bc2baeb9"),
            /* Time */ new Guid("3921a1d3-c345-42e5-a567-b9ca2ef6b366"),
            /* Truncate */ new Guid("ad284000-7b31-4291-9bb5-650e0816e5b4"),
            /* Try */ new Guid("3bc552ff-e29e-4855-a208-30517268c60d"),
            /* Unload */ new Guid("c37b126c-c84e-4296-9931-4f0033645ff4"),
            /* Unset */ new Guid("fcafc062-3490-4cf9-83d7-7ddb2c1e8838"),
            /* Unsetf */ new Guid("945b2916-422a-4cb2-a18c-4693d868887f"),
            /* Update */ new Guid("9ddc097b-4635-4504-9493-98c25f0baf83"),
            /* Uplevel */ new Guid("bafa3e2b-b26c-4552-9365-f9089d757e33"),
            /* Upvar */ new Guid("399949c6-da0d-4061-bf14-04fcbc8a8c65"),
            /* Vwait */ new Guid("9a58d5a9-85b8-43e1-9136-5667eb2e87bf"),
            /* While */ new Guid("eccc438a-2bfe-4a5d-b3e5-555809bd7bc8"),
            /* Xml */ new Guid("ab8802bd-bcfd-4042-8e75-ea85c4a67959"),
            /* _Encoding */ new Guid("428e30c3-2e24-4e9a-8f13-887d8dab6756"),
            /* _File */ new Guid("b2d52593-b6b5-4382-8992-af0ecee078bb"),
            /* _Guid */ new Guid("0214cfc3-e69e-4e85-8623-336b9ba8076d"),
            /* _Hash */ new Guid("66a2a9aa-1024-4199-b6d9-097c2662acd7"),
            /* _String */ new Guid("eb32c33f-5454-4b8f-894a-af725b0df057"),
            /* _Uri */ new Guid("ca27d807-1636-4d17-bbf2-ebbe91aed44f"),
            /* _Variable */ new Guid("8f887079-44e3-405a-a0d3-0b446ce2fa15"),
            /* _Version */ new Guid("b5813212-3372-416c-96ac-0b424a1465f3")
        };

        ///////////////////////////////////////////////////////////////////////

        private static CommandFlags[] commandFlags = {
            /* After */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Append */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Apply */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.SecuritySdk,
            /* Array */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Base64 */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Bgerror */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Break */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Callback */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Catch */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Cd */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard,
            /* Clock */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard
#if NATIVE && WINDOWS
            | CommandFlags.NativeCode,
#else
            ,
#endif
            /* Close */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Concat */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Continue */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Debug */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard | CommandFlags.Diagnostic,
            /* Do */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Downlevel */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Eof */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Error */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Eval */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Exec */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard,
            /* Exit */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Expr */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.Initialize,
            /* Fblocked */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Fconfigure */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Fcopy */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Flush */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* For */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Foreach */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.SecuritySdk,
            /* Format */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Fpclassify */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Getf */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard | CommandFlags.Obsolete | CommandFlags.Diagnostic,
            /* Gets */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Glob */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard,
            /* Global */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Host */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard,
            /* If */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.Initialize | CommandFlags.SecuritySdk,
            /* Incr */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Info */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard
#if NATIVE
            | CommandFlags.NativeCode
#endif
            | CommandFlags.Initialize,
            /* Interp */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard | CommandFlags.Initialize,
            /* Invoke */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Join */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Kill */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard,
            /* Lappend */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Lassign */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Lget */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Library */ CommandFlags.Core | CommandFlags.NativeCode | CommandFlags.Unsafe | CommandFlags.NonStandard,
            /* Lindex */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Linsert */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* List */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.SecuritySdk,
            /* Llength */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.Initialize,
            /* Lmap */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Load */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard | CommandFlags.SecuritySdk | CommandFlags.LicenseSdk,
            /* Lrange */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Lremove */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Lrepeat */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Lreplace */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Lreverse */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Lsearch */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Lset */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Lsort */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Namespace1 */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.Initialize,
            /* Namespace2 */ CommandFlags.Core | CommandFlags.NoAdd | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.Initialize,
            /* Napply */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Nop */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Nproc */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Object */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard,
            /* Open */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard,
            /* Package */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard | CommandFlags.Initialize | CommandFlags.SecuritySdk | CommandFlags.LicenseSdk,
            /* Parse */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard | CommandFlags.Diagnostic,
            /* Pid */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard,
            /* Proc */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.Initialize,
            /* Puts */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Pwd */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard,
            /* Read */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Regexp */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Regsub */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Rename */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.SecuritySdk,
            /* Return */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.Initialize,
            /* Scope */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Seek */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Set */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Setf */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard | CommandFlags.Obsolete | CommandFlags.Diagnostic,
            /* Socket */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard,
            /* Source */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard,
            /* Split */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Sql */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard
#if NATIVE && WINDOWS
            | CommandFlags.NativeCode,
#else
            ,
#endif
            /* Subst */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Switch */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Tcl */ CommandFlags.Core | CommandFlags.NativeCode | CommandFlags.Unsafe | CommandFlags.NonStandard,
            /* Tell */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Test1 */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard | CommandFlags.Diagnostic,
            /* Test2 */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard | CommandFlags.Diagnostic
#if NATIVE && WINDOWS
            | CommandFlags.NativeCode,
#else
            ,
#endif
            /* Throw */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Time */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard
#if NATIVE && WINDOWS
            | CommandFlags.NativeCode,
#else
            ,
#endif
            /* Truncate */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Try */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* Unload */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard,
            /* Unset */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Unsetf */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard | CommandFlags.Obsolete | CommandFlags.Diagnostic,
            /* Update */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Uplevel */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Upvar */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Vwait */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* While */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* Xml */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard,
            /* _Encoding */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* _File */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.Standard
#if NATIVE && WINDOWS
            | CommandFlags.NativeCode
#endif
            | CommandFlags.SecuritySdk,
            /* _Guid */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* _Hash */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.NonStandard,
            /* _String */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard | CommandFlags.Initialize | CommandFlags.SecuritySdk,
            /* _Uri */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard,
            /* _Variable */ CommandFlags.Core | CommandFlags.Safe | CommandFlags.Standard,
            /* _Version */ CommandFlags.Core | CommandFlags.Unsafe | CommandFlags.NonStandard | CommandFlags.Diagnostic
        };

        ///////////////////////////////////////////////////////////////////////

        private static string[] commandNames = {
            /* After */ null,
            /* Append */ null,
            /* Apply */ null,
            /* Array */ null,
            /* Base64 */ null,
            /* Bgerror */ null,
            /* Break */ null,
            /* Callback */ null,
            /* Catch */ null,
            /* Cd */ null,
            /* Clock */ null,
            /* Close */ null,
            /* Concat */ null,
            /* Continue */ null,
            /* Debug */ null,
            /* Do */ null,
            /* Downlevel */ null,
            /* Eof */ null,
            /* Error */ null,
            /* Eval */ null,
            /* Exec */ null,
            /* Exit */ null,
            /* Expr */ null,
            /* Fblocked */ null,
            /* Fconfigure */ null,
            /* Fcopy */ null,
            /* Flush */ null,
            /* For */ null,
            /* Foreach */ null,
            /* Format */ null,
            /* Fpclassify */ null,
            /* Getf */ null,
            /* Gets */ null,
            /* Glob */ null,
            /* Global */ null,
            /* Host */ null,
            /* If */ null,
            /* Incr */ null,
            /* Info */ null,
            /* Interp */ null,
            /* Invoke */ null,
            /* Join */ null,
            /* Kill */ null,
            /* Lappend */ null,
            /* Lassign */ null,
            /* Lget */ null,
            /* Library */ null,
            /* Lindex */ null,
            /* Linsert */ null,
            /* List */ null,
            /* Llength */ null,
            /* Lmap */ null,
            /* Load */ null,
            /* Lrange */ null,
            /* Lremove */ null,
            /* Lrepeat */ null,
            /* Lreplace */ null,
            /* Lreverse */ null,
            /* Lsearch */ null,
            /* Lset */ null,
            /* Lsort */ null,
            /* Namespace1 */ "namespace",
            /* Namespace2 */ "namespace",
            /* Napply */ null,
            /* Nop */ null,
            /* Nproc */ null,
            /* Object */ null,
            /* Open */ null,
            /* Package */ null,
            /* Parse */ null,
            /* Pid */ null,
            /* Proc */ null,
            /* Puts */ null,
            /* Pwd */ null,
            /* Read */ null,
            /* Regexp */ null,
            /* Regsub */ null,
            /* Rename */ null,
            /* Return */ null,
            /* Scope */ null,
            /* Seek */ null,
            /* Set */ null,
            /* Setf */ null,
            /* Socket */ null,
            /* Source */ null,
            /* Split */ null,
            /* Sql */ null,
            /* Subst */ null,
            /* Switch */ null,
            /* Tcl */ null,
            /* Tell */ null,
            /* Test1 */ null,
            /* Test2 */ null,
            /* Throw */ null,
            /* Time */ null,
            /* Truncate */ null,
            /* Try */ null,
            /* Unload */ null,
            /* Unset */ null,
            /* Unsetf */ null,
            /* Update */ null,
            /* Uplevel */ null,
            /* Upvar */ null,
            /* Vwait */ null,
            /* While */ null,
            /* Xml */ null,
            /* _Encoding */ null,
            /* _File */ null,
            /* _Guid */ null,
            /* _Hash */ null,
            /* _String */ null,
            /* _Uri */ null,
            /* _Variable */ null,
            /* _Version */ null
        };

        ///////////////////////////////////////////////////////////////////////

        private static string[] commandGroups = {
            /* After */ "event",
            /* Append */ "string",
            /* Apply */ "procedure",
            /* Array */ "variable",
            /* Base64 */ "string",
            /* Bgerror */ "scriptEnvironment",
            /* Break */ "control",
            /* Callback */ "event",
            /* Catch */ "control",
            /* Cd */ "fileSystem",
            /* Clock */ "time",
            /* Close */ "channel",
            /* Concat */ "string",
            /* Continue */ "control",
            /* Debug */ "debug",
            /* Do */ "loop",
            /* Downlevel */ "control",
            /* Eof */ "channel",
            /* Error */ "control",
            /* Eval */ "engine",
            /* Exec */ "nativeEnvironment",
            /* Exit */ "nativeEnvironment",
            /* Expr */ "expression",
            /* Fblocked */ "channel",
            /* Fconfigure */ "channel",
            /* Fcopy */ "channel",
            /* Flush */ "channel",
            /* For */ "loop",
            /* Foreach */ "loop",
            /* Format */ "string",
            /* Fpclassify */ "expression",
            /* Getf */ "variable",
            /* Gets */ "channel",
            /* Glob */ "fileSystem",
            /* Global */ "variable",
            /* Host */ "managedEnvironment",
            /* If */ "conditional",
            /* Incr */ "expression",
            /* Info */ "introspection",
            /* Interp */ "scriptEnvironment",
            /* Invoke */ "engine",
            /* Join */ "string",
            /* Kill */ "nativeEnvironment",
            /* Lappend */ "list",
            /* Lassign */ "list",
            /* Lget */ "list",
            /* Library */ "nativeEnvironment",
            /* Lindex */ "list",
            /* Linsert */ "list",
            /* List */ "list",
            /* Llength */ "list",
            /* Lmap */ "loop",
            /* Load */ "managedEnvironment",
            /* Lrange */ "list",
            /* Lremove */ "list",
            /* Lrepeat */ "list",
            /* Lreplace */ "list",
            /* Lreverse */ "list",
            /* Lsearch */ "list",
            /* Lset */ "list",
            /* Lsort */ "list",
            /* Namespace1 */ "scriptEnvironment",
            /* Namespace2 */ "scriptEnvironment",
            /* Napply */ "procedure",
            /* Nop */ "nop",
            /* Nproc */ "procedure",
            /* Object */ "managedEnvironment",
            /* Open */ "fileSystem",
            /* Package */ "scriptEnvironment",
            /* Parse */ "string",
            /* Pid */ "nativeEnvironment",
            /* Proc */ "procedure",
            /* Puts */ "channel",
            /* Pwd */ "fileSystem",
            /* Read */ "channel",
            /* Regexp */ "string",
            /* Regsub */ "string",
            /* Rename */ "scriptEnvironment",
            /* Return */ "control",
            /* Scope */ "variable",
            /* Seek */ "channel",
            /* Set */ "variable",
            /* Setf */ "variable",
            /* Socket */ "network",
            /* Source */ "engine",
            /* Split */ "string",
            /* Sql */ "managedEnvironment",
            /* Subst */ "engine",
            /* Switch */ "conditional",
            /* Tcl */ "nativeEnvironment",
            /* Tell */ "channel",
            /* Test1 */ "test",
            /* Test2 */ "test",
            /* Throw */ "control",
            /* Time */ "time",
            /* Truncate */ "channel",
            /* Try */ "control",
            /* Unload */ "managedEnvironment",
            /* Unset */ "variable",
            /* Unsetf */ "variable",
            /* Update */ "event",
            /* Uplevel */ "control",
            /* Upvar */ "variable",
            /* Vwait */ "event",
            /* While */ "loop",
            /* Xml */ "managedEnvironment",
            /* _Encoding */ "string",
            /* _File */ "fileSystem",
            /* _Guid */ "string",
            /* _Hash */ "string",
            /* _String */ "string",
            /* _Uri */ "network",
            /* _Variable */ "variable",
            /* _Version */ "introspection"
        };
        #endregion

        ///////////////////////////////////////////////////////////////////////

        #region Built-In Function Data
        private static Type[] functionTypes = {
            typeof(_Functions.Abs),
            typeof(_Functions.Acos),
            typeof(_Functions.Asin),
            typeof(_Functions.Atan),
            typeof(_Functions.Atan2),
            typeof(_Functions.Bool),
            typeof(_Functions.Ceil),
            typeof(_Functions.Cos),
            typeof(_Functions.Cosh),
            typeof(_Functions.Decimal),
            typeof(_Functions.Double),
            typeof(_Functions.E),
            typeof(_Functions.Epsilon),
            typeof(_Functions.Exp),
            typeof(_Functions.Flags),
            typeof(_Functions.Floor),
            typeof(_Functions.Fmod),
            typeof(_Functions.Hypot),
            typeof(_Functions.Int),
            typeof(_Functions.Isfinite),
            typeof(_Functions.Isinf),
            typeof(_Functions.Isnan),
            typeof(_Functions.Isnormal),
            typeof(_Functions.Issubnormal),
            typeof(_Functions.Isunordered),
            typeof(_Functions.List),
            typeof(_Functions.Log),
            typeof(_Functions.Log10),
            typeof(_Functions.Log2),
            typeof(_Functions.Logx),
            typeof(_Functions.Max),
            typeof(_Functions.Min),
            typeof(_Functions.Nop),
            typeof(_Functions.Pi),
            typeof(_Functions.Pow),
            typeof(_Functions.Rand),
            typeof(_Functions.Randstr),
            typeof(_Functions.Round),
            typeof(_Functions.Round2),
            typeof(_Functions.Round3),
            typeof(_Functions.Sign),
            typeof(_Functions.Sin),
            typeof(_Functions.Sinh),
            typeof(_Functions.Sqrt),
            typeof(_Functions.Srand),
            typeof(_Functions.Tan),
            typeof(_Functions.Tanh),
            typeof(_Functions.Truncate),
            typeof(_Functions.Typeof),
            typeof(_Functions.Wide),
            typeof(_Functions._DateTime),
            typeof(_Functions._Random),
            typeof(_Functions._TimeSpan)
        };

        ///////////////////////////////////////////////////////////////////////

        private static Guid?[] functionIds = {
            /* Abs */ new Guid("6331715b-4d54-43cd-b155-7862da954759"),
            /* Acos */ new Guid("70b7aadd-6f79-4f40-b304-cfa94a9a4db8"),
            /* Asin */ new Guid("20ba3a6f-fa2c-48e5-835c-4f84d0a41636"),
            /* Atan */ new Guid("191ea18f-f921-4486-8038-6f41f1795114"),
            /* Atan2 */ new Guid("72402dfb-8dfd-40fb-9529-033ea0cd7b18"),
            /* Bool */ new Guid("11e36c1b-be45-42de-ba3c-e173047e722c"),
            /* Ceil */ new Guid("fee16b40-2505-42b9-86b1-956b3f02a7eb"),
            /* Cos */ new Guid("81f048b1-bff1-4f16-87b7-400e6305abb7"),
            /* Cosh */ new Guid("d377a7aa-c3b8-438d-82d6-046c3a314535"),
            /* Decimal */ new Guid("2fd09458-5ab2-43cf-ab3e-7370b2cd993a"),
            /* Double */ new Guid("fa5caa7b-48c7-46b0-b674-6aaab441f09f"),
            /* E */ new Guid("66992b90-590c-43b3-8612-89eb789e39f5"),
            /* Epsilon */ new Guid("6bb8135a-5e22-43d3-a642-55120d26fd9c"),
            /* Exp */ new Guid("5be3d3cf-1a45-4a68-bb25-74cef2d49986"),
            /* Flags */ new Guid("f19b8c9b-2a9a-48fd-9c3e-ba0cf0b373ec"),
            /* Floor */ new Guid("7168a66b-87f5-4c02-9ea6-66b4c8bc0de3"),
            /* Fmod */ new Guid("cc4ac906-03b1-4521-868f-78a7fb5a86a5"),
            /* Hypot */ new Guid("c05488d0-87d2-4d01-855b-ccd83b613b8f"),
            /* Int */ new Guid("e4e90f5e-61b3-467a-ad38-175b57753a8b"),
            /* Isfinite */ new Guid("1ec80d5c-81fb-4838-a170-7467b615afc9"),
            /* Isinf */ new Guid("72466c08-0a8c-44a9-95ba-c8f68497edc6"),
            /* Isnan */ new Guid("2c64b2be-9a03-4f7b-bbea-79858725aadc"),
            /* Isnormal */ new Guid("4d3b9bf9-220b-4aea-bf56-d3f4f02e2ca6"),
            /* Issubnormal */ new Guid("d3dd868f-c9c8-42eb-b258-191c7b2efa94"),
            /* Isunordered */ new Guid("8f18b59c-eca3-4729-930a-d697c3e4c485"),
            /* List */ new Guid("2a7fc56f-ba95-488a-bf27-dad20a226cec"),
            /* Log */ new Guid("a18bc359-6a3c-4772-97fa-f791e290e7b0"),
            /* Log10 */ new Guid("5d755c5f-63ba-4441-959e-fc15aaf41200"),
            /* Log2 */ new Guid("495e138a-6c52-46e6-84dd-ed72514f0b50"),
            /* Logx */ new Guid("1ef4b046-c392-4919-a240-1e085b8efe2d"),
            /* Max */ new Guid("44e2cc2a-f2a8-445f-83d6-cb4c4ec60cd8"),
            /* Min */ new Guid("04716a06-d00c-433a-914b-8eb4769ad74c"),
            /* Nop */ new Guid("801dfe01-7ec6-4fd9-98c6-8c3eada55da0"),
            /* Pi */ new Guid("4acedc8c-2bfa-4d5e-afe6-6734eff1101b"),
            /* Pow */ new Guid("a16093f7-ded1-4fe5-9347-3c95a49de5eb"),
            /* Rand */ new Guid("c3c083a9-bab0-4153-8223-51ae7bc16953"),
            /* Randstr */ new Guid("b9168098-2447-4a77-825a-7661eaeefbb6"),
            /* Round */ new Guid("ef06256a-9a2e-41eb-88bb-7a34f14bbe21"),
            /* Round2 */ new Guid("3dea331a-1781-44e6-9bb1-5d8aa529fd29"),
            /* Round3 */ new Guid("0d9f9d0e-e809-46bb-948d-e702b994566a"),
            /* Sign */ new Guid("4b1c325e-caa3-419b-9657-80ff0f070fb7"),
            /* Sin */ new Guid("4458b1be-4dde-4db0-b1a6-1e1765e3283a"),
            /* Sinh */ new Guid("5e60e5ec-144a-47bd-9ec9-63b5f8956c6b"),
            /* Sqrt */ new Guid("fdd6ea2b-8f41-486f-8594-ad5b6a645a92"),
            /* Srand */ new Guid("6dc54fd6-fc06-46a5-8eb2-40a2f9d0d5d2"),
            /* Tan */ new Guid("89df3685-fc6f-46d1-b403-058c08ecb09d"),
            /* Tanh */ new Guid("fa1de01c-9cbe-4eae-a23d-f7318995a233"),
            /* Truncate */ new Guid("fd0e647e-beeb-408b-9ebf-b6d9e09d10d9"),
            /* Typeof */ new Guid("5fe20712-cd80-4329-b889-5233b3052c60"),
            /* Wide */ new Guid("150aae30-2234-411b-8cac-a13c942aeee9"),
            /* _DateTime */ new Guid("132e9b03-7a92-4fab-bba6-50176432741c"),
            /* _Random */ new Guid("1497187e-2051-473e-b55c-179b4c74d71d"),
            /* _TimeSpan */ new Guid("022f38b7-f63c-439d-8329-7c1825e4c4ad")
        };

        ///////////////////////////////////////////////////////////////////////

        private static FunctionFlags[] functionFlags = {
            /* Abs */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Acos */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Asin */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Atan */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Atan2 */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Bool */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Ceil */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Cos */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Cosh */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Decimal */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Double */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* E */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Epsilon */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Exp */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Flags */ FunctionFlags.Core | FunctionFlags.Unsafe | FunctionFlags.NonStandard,
            /* Floor */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Fmod */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Hypot */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Int */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Isfinite */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Isinf */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Isnan */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Isnormal */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Issubnormal */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Isunordered */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* List */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Log */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Log10 */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Log2 */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Logx */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Max */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Min */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Nop */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Pi */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Pow */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Rand */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Randstr */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Round */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Round2 */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Round3 */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Sign */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Sin */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Sinh */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Sqrt */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Srand */ FunctionFlags.Core | FunctionFlags.Unsafe | FunctionFlags.Standard,
            /* Tan */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Tanh */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* Truncate */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Typeof */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* Wide */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.Standard,
            /* _DateTime */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* _Random */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard,
            /* _TimeSpan */ FunctionFlags.Core | FunctionFlags.Safe | FunctionFlags.NonStandard
        };

        ///////////////////////////////////////////////////////////////////////

        private static Arity[] functionArguments = {
            /* Abs */ Arity.Unary,
            /* Acos */ Arity.Unary,
            /* Asin */ Arity.Unary,
            /* Atan */ Arity.Unary,
            /* Atan2 */ Arity.Binary,
            /* Bool */ Arity.Unary,
            /* Ceil */ Arity.Unary,
            /* Cos */ Arity.Unary,
            /* Cosh */ Arity.Unary,
            /* Decimal */ Arity.Unary,
            /* Double */ Arity.Unary,
            /* E */ Arity.Nullary,
            /* Epsilon */ Arity.Nullary,
            /* Exp */ Arity.Unary,
            /* Flags */ Arity.Unary,
            /* Floor */ Arity.Unary,
            /* Fmod */ Arity.Binary,
            /* Hypot */ Arity.Binary,
            /* Int */ Arity.Unary,
            /* Isfinite */ Arity.Unary,
            /* Isinf */ Arity.Unary,
            /* Isnan */ Arity.Unary,
            /* Isnormal */ Arity.Unary,
            /* Issubnormal */ Arity.Unary,
            /* Isunordered */ Arity.Binary,
            /* List */ Arity.Unary,
            /* Log */ Arity.Unary,
            /* Log10 */ Arity.Unary,
            /* Log2 */ Arity.Unary,
            /* Logx */ Arity.Binary,
            /* Max */ Arity.None,
            /* Min */ Arity.None,
            /* Nop */ Arity.None,
            /* Pi */ Arity.Nullary,
            /* Pow */ Arity.Binary,
            /* Rand */ Arity.Nullary,
            /* Randstr */ Arity.Unary,
            /* Round */ Arity.Unary,
            /* Round2 */ Arity.Binary,
            /* Round3 */ Arity.Ternary,
            /* Sign */ Arity.Unary,
            /* Sin */ Arity.Unary,
            /* Sinh */ Arity.Unary,
            /* Sqrt */ Arity.Unary,
            /* Srand */ Arity.Unary,
            /* Tan */ Arity.Unary,
            /* Tanh */ Arity.Unary,
            /* Truncate */ Arity.Unary,
            /* Typeof */ Arity.Unary,
            /* Wide */ Arity.Unary,
            /* _DateTime */ Arity.Unary,
            /* _Random */ Arity.Nullary,
            /* _TimeSpan */ Arity.Unary
        };

        ///////////////////////////////////////////////////////////////////////

        private static string[] functionNames = {
            /* Abs */ null,
            /* Acos */ null,
            /* Asin */ null,
            /* Atan */ null,
            /* Atan2 */ null,
            /* Bool */ null,
            /* Ceil */ null,
            /* Cos */ null,
            /* Cosh */ null,
            /* Decimal */ null,
            /* Double */ null,
            /* E */ null,
            /* Epsilon */ null,
            /* Exp */ null,
            /* Flags */ null,
            /* Floor */ null,
            /* Fmod */ null,
            /* Hypot */ null,
            /* Int */ null,
            /* Isfinite */ null,
            /* Isinf */ null,
            /* Isnan */ null,
            /* Isnormal */ null,
            /* Issubnormal */ null,
            /* Isunordered */ null,
            /* List */ null,
            /* Log */ null,
            /* Log10 */ null,
            /* Log2 */ null,
            /* Logx */ null,
            /* Max */ null,
            /* Min */ null,
            /* Nop */ null,
            /* Pi */ null,
            /* Pow */ null,
            /* Rand */ null,
            /* Randstr */ null,
            /* Round */ null,
            /* Round2 */ null,
            /* Round3 */ null,
            /* Sign */ null,
            /* Sin */ null,
            /* Sinh */ null,
            /* Sqrt */ null,
            /* Srand */ null,
            /* Tan */ null,
            /* Tanh */ null,
            /* Truncate */ null,
            /* Typeof */ null,
            /* Wide */ null,
            /* _DateTime */ null,
            /* _Random */ null,
            /* _TimeSpan */ null
        };

        ///////////////////////////////////////////////////////////////////////

        private static string[] functionGroups = {
            /* Abs */ "component",
            /* Acos */ "trigonometric",
            /* Asin */ "trigonometric",
            /* Atan */ "trigonometric",
            /* Atan2 */ "trigonometric",
            /* Bool */ "conversion",
            /* Ceil */ "rounding",
            /* Cos */ "trigonometric",
            /* Cosh */ "trigonometric",
            /* Decimal */ "conversion",
            /* Double */ "conversion",
            /* E */ "constant",
            /* Epsilon */ "constant",
            /* Exp */ "exponential",
            /* Flags */ "control",
            /* Floor */ "rounding",
            /* Fmod */ "congruence",
            /* Hypot */ "trigonometric",
            /* Int */ "conversion",
            /* Isfinite */ "indicator",
            /* Isinf */ "indicator",
            /* Isnan */ "indicator",
            /* Isnormal */ "indicator",
            /* Issubnormal */ "indicator",
            /* Isunordered */ "indicator",
            /* List */ "conversion",
            /* Log */ "logarithmic",
            /* Log10 */ "logarithmic",
            /* Log2 */ "logarithmic",
            /* Logx */ "logarithmic",
            /* Max */ "aggregate",
            /* Min */ "aggregate",
            /* Nop */ "nop",
            /* Pi */ "constant",
            /* Pow */ "power",
            /* Rand */ "random",
            /* Randstr */ "random",
            /* Round */ "rounding",
            /* Round2 */ "rounding",
            /* Round3 */ "rounding",
            /* Sign */ "component",
            /* Sin */ "trigonometric",
            /* Sinh */ "trigonometric",
            /* Sqrt */ "power",
            /* Srand */ "random",
            /* Tan */ "trigonometric",
            /* Tanh */ "trigonometric",
            /* Truncate */ "rounding",
            /* Typeof */ "conversion",
            /* Wide */ "conversion",
            /* _DateTime */ "conversion",
            /* _Random */ "random",
            /* _TimeSpan */ "conversion"
        };

        ///////////////////////////////////////////////////////////////////////

        private static TypeListFlags[] functionTypeListFlags = {
            /* Abs */ TypeListFlags.NumberTypes,
            /* Acos */ TypeListFlags.FloatTypes,
            /* Asin */ TypeListFlags.FloatTypes,
            /* Atan */ TypeListFlags.FloatTypes,
            /* Atan2 */ TypeListFlags.FloatTypes,
            /* Bool */ TypeListFlags.NumberTypes,
            /* Ceil */ TypeListFlags.NonIntegralTypes,
            /* Cos */ TypeListFlags.FloatTypes,
            /* Cosh */ TypeListFlags.FloatTypes,
            /* Decimal */ TypeListFlags.NumberTypes,
            /* Double */ TypeListFlags.NumberTypes,
            /* E */ TypeListFlags.None,
            /* Epsilon */ TypeListFlags.None,
            /* Exp */ TypeListFlags.FloatTypes,
            /* Flags */ TypeListFlags.StringTypes,
            /* Floor */ TypeListFlags.NonIntegralTypes,
            /* Fmod */ TypeListFlags.FloatTypes,
            /* Hypot */ TypeListFlags.FloatTypes,
            /* Int */ TypeListFlags.NumberTypes,
            /* Isfinite */ TypeListFlags.FloatTypes,
            /* Isinf */ TypeListFlags.FloatTypes,
            /* Isnan */ TypeListFlags.FloatTypes,
            /* Isnormal */ TypeListFlags.FloatTypes,
            /* Issubnormal */ TypeListFlags.FloatTypes,
            /* Isunordered */ TypeListFlags.FloatTypes,
            /* List */ TypeListFlags.AllTypes,
            /* Log */ TypeListFlags.FloatTypes,
            /* Log10 */ TypeListFlags.FloatTypes,
            /* Log2 */ TypeListFlags.NumberTypes,
            /* Logx */ TypeListFlags.FloatTypes,
            /* Max */ TypeListFlags.NumberTypes,
            /* Min */ TypeListFlags.NumberTypes,
            /* Nop */ TypeListFlags.AllTypes,
            /* Pi */ TypeListFlags.None,
            /* Pow */ TypeListFlags.FloatTypes,
            /* Rand */ TypeListFlags.None,
            /* Randstr */ TypeListFlags.IntegerTypes,
            /* Round */ TypeListFlags.NumberTypes,
            /* Round2 */ TypeListFlags.NumberTypes,
            /* Round3 */ TypeListFlags.NumberTypes,
            /* Sign */ TypeListFlags.NumberTypes,
            /* Sin */ TypeListFlags.FloatTypes,
            /* Sinh */ TypeListFlags.FloatTypes,
            /* Sqrt */ TypeListFlags.FloatTypes,
            /* Srand */ TypeListFlags.IntegerTypes,
            /* Tan */ TypeListFlags.FloatTypes,
            /* Tanh */ TypeListFlags.FloatTypes,
            /* Truncate */ TypeListFlags.NonIntegralTypes,
            /* Typeof */ TypeListFlags.AllTypes,
            /* Wide */ TypeListFlags.NumberTypes,
            /* _DateTime */ TypeListFlags.AllTypes,
            /* _Random */ TypeListFlags.None,
            /* _TimeSpan */ TypeListFlags.AllTypes
        };
        #endregion

        ///////////////////////////////////////////////////////////////////////

        #region Built-In Operator Data
        private static Type[] operatorTypes = {
            typeof(_Operators.BitwiseAnd),
            typeof(_Operators.BitwiseEqv),
            typeof(_Operators.BitwiseImp),
            typeof(_Operators.BitwiseNot),
            typeof(_Operators.BitwiseOr),
            typeof(_Operators.BitwiseXor),
            typeof(_Operators.Divide),
            typeof(_Operators.Equal),
            typeof(_Operators.Exponent),
            typeof(_Operators.GreaterThan),
            typeof(_Operators.GreaterThanOrEqualTo),
            typeof(_Operators.LeftRotate),
            typeof(_Operators.LeftShift),
            typeof(_Operators.LessThan),
            typeof(_Operators.LessThanOrEqualTo),
            typeof(_Operators.ListIn),
            typeof(_Operators.ListNotIn),
            typeof(_Operators.LogicalAnd),
            typeof(_Operators.LogicalEqv),
            typeof(_Operators.LogicalImp),
            typeof(_Operators.LogicalNot),
            typeof(_Operators.LogicalOr),
            typeof(_Operators.LogicalXor),
            typeof(_Operators.Minus),
            typeof(_Operators.Modulus),
            typeof(_Operators.Multiply),
            typeof(_Operators.NotEqual),
            typeof(_Operators.Plus),
            typeof(_Operators.Question),
            typeof(_Operators.RightRotate),
            typeof(_Operators.RightShift),
            typeof(_Operators.StringEqual),
            typeof(_Operators.StringGreaterThan),
            typeof(_Operators.StringGreaterThanOrEqualTo),
            typeof(_Operators.StringLessThan),
            typeof(_Operators.StringLessThanOrEqualTo),
            typeof(_Operators.StringNotEqual),
            typeof(_Operators.VariableAssignment)
        };

        ///////////////////////////////////////////////////////////////////////

        private static Guid?[] operatorIds = {
            /* BitwiseAnd */ new Guid("282737fd-f974-478c-86c0-36149d83028a"),
            /* BitwiseEqv */ new Guid("c76c4a7b-1190-497c-b0a1-001c77f49e99"),
            /* BitwiseImp */ new Guid("571cbd10-c710-41b6-8532-0ba61c5e9fa0"),
            /* BitwiseNot */ new Guid("1e9331a3-b6be-45c1-aa04-5063410d3f09"),
            /* BitwiseOr */ new Guid("9b87f17b-0992-4a70-9611-2e08fca9d2bf"),
            /* BitwiseXor */ new Guid("5b602c6b-1621-4d00-9f01-8d93e1c15cc4"),
            /* Divide */ new Guid("99261dd9-726c-4559-b2e4-e80aff0f2f6d"),
            /* Equal */ new Guid("7ed209e6-b614-4922-8e3f-de5f5855dbcc"),
            /* Exponent */ new Guid("3a0efea2-4c30-43b2-b63a-b3c7d0f0dbc9"),
            /* GreaterThan */ new Guid("12161625-71ff-4150-bcf4-7b1b6b015915"),
            /* GreaterThanOrEqualTo */ new Guid("3a75021c-ca94-4766-b2ec-b56b18f10bfd"),
            /* LeftRotate */ new Guid("1586ae75-31f4-4d9b-921c-82b79bcd8b5d"),
            /* LeftShift */ new Guid("13823c03-46f6-483c-bb2f-075f0f76724e"),
            /* LessThan */ new Guid("8d293a7d-99ae-43fa-b466-81dfd362cbe6"),
            /* LessThanOrEqualTo */ new Guid("79406242-64b3-4483-a248-7ad2f48bd6f4"),
            /* ListIn */ new Guid("ad5c5e98-2cd0-4d20-81c7-f0a7d9dceeb1"),
            /* ListNotIn */ new Guid("945819a3-1415-41a2-9c57-65641ccf98e9"),
            /* LogicalAnd */ new Guid("9d11a005-8ea1-4c30-85b0-17f8c5bc5cb1"),
            /* LogicalEqv */ new Guid("a6e180b8-cb52-4ec1-9830-39cd8493d97b"),
            /* LogicalImp */ new Guid("1af81a08-1df4-4bd6-b9fa-963142257b04"),
            /* LogicalNot */ new Guid("1896ddee-7435-4a0a-b628-0ce851a87880"),
            /* LogicalOr */ new Guid("60581f56-b46d-400b-a20d-10b8dfdb420a"),
            /* LogicalXor */ new Guid("403adc7b-f116-4ad2-b5ec-c35307664f1b"),
            /* Minus */ new Guid("037ecf98-21d9-4a00-bfdf-c50581be276b"),
            /* Modulus */ new Guid("93eff400-bbf3-4478-b778-61244b460eea"),
            /* Multiply */ new Guid("7b59bbc7-4b52-4dae-8385-54903c554b9e"),
            /* NotEqual */ new Guid("ab93e922-b5e8-48b2-a5ec-6d576dac8ba8"),
            /* Plus */ new Guid("13aaf4ed-a901-48d3-a963-c98878778cab"),
            /* Question */ new Guid("c3ce831f-e157-4df9-8bfa-844b94d1104f"),
            /* RightRotate */ new Guid("f14c5673-bb8d-4eca-8321-3aaa4932fd45"),
            /* RightShift */ new Guid("4064ada2-b1b2-4695-b099-f4daebb57da2"),
            /* StringEqual */ new Guid("b1b8bfdd-28ad-4d6b-9228-5dfaabac3790"),
            /* StringGreaterThan */ new Guid("33eeb655-0b2f-4287-bb11-12206b7d11be"),
            /* StringGreaterThanOrEqualTo */ new Guid("bfc6940f-200d-44f9-bf4e-d4142e21daf6"),
            /* StringLessThan */ new Guid("76967830-ce3a-41c0-ae62-6662c4a09b59"),
            /* StringLessThanOrEqualTo */ new Guid("2b25af98-8ff9-48e3-8772-b97cc805479b"),
            /* StringNotEqual */ new Guid("7f159bce-39f5-471b-8332-6772b658cf8b"),
            /* VariableAssignment */ new Guid("e46b3b67-cae1-4142-8c4f-af6cd776ced6")
        };

        ///////////////////////////////////////////////////////////////////////

        private static OperatorFlags[] operatorFlags = {
            /* BitwiseAnd */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Bitwise,
            /* BitwiseEqv */ OperatorFlags.Core | OperatorFlags.NonStandard | OperatorFlags.Bitwise,
            /* BitwiseImp */ OperatorFlags.Core | OperatorFlags.NonStandard | OperatorFlags.Bitwise,
            /* BitwiseNot */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Bitwise,
            /* BitwiseOr */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Bitwise,
            /* BitwiseXor */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Bitwise,
            /* Divide */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Arithmetic,
            /* Equal */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Relational | OperatorFlags.Initialize | OperatorFlags.SecuritySdk,
            /* Exponent */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Arithmetic,
            /* GreaterThan */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Relational | OperatorFlags.Initialize,
            /* GreaterThanOrEqualTo */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Relational,
            /* LeftRotate */ OperatorFlags.Core | OperatorFlags.NonStandard | OperatorFlags.Bitwise,
            /* LeftShift */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Bitwise,
            /* LessThan */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Relational,
            /* LessThanOrEqualTo */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Relational,
            /* ListIn */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.List,
            /* ListNotIn */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.List,
            /* LogicalAnd */ OperatorFlags.Core | OperatorFlags.Special | OperatorFlags.Standard | OperatorFlags.Logical | OperatorFlags.Initialize,
            /* LogicalEqv */ OperatorFlags.Core | OperatorFlags.NonStandard | OperatorFlags.Logical,
            /* LogicalImp */ OperatorFlags.Core | OperatorFlags.Special | OperatorFlags.NonStandard | OperatorFlags.Logical,
            /* LogicalNot */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Logical | OperatorFlags.Initialize | OperatorFlags.SecuritySdk,
            /* LogicalOr */ OperatorFlags.Core | OperatorFlags.Special | OperatorFlags.Standard | OperatorFlags.Logical,
            /* LogicalXor */ OperatorFlags.Core | OperatorFlags.NonStandard | OperatorFlags.Logical,
            /* Minus */ OperatorFlags.Core | OperatorFlags.Special | OperatorFlags.Standard | OperatorFlags.Arithmetic,
            /* Modulus */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Arithmetic,
            /* Multiply */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Arithmetic,
            /* NotEqual */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Relational,
            /* Plus */ OperatorFlags.Core | OperatorFlags.Special | OperatorFlags.Standard | OperatorFlags.Arithmetic,
            /* Question */ OperatorFlags.Core | OperatorFlags.Special | OperatorFlags.Direct | OperatorFlags.Standard | OperatorFlags.Conditional | OperatorFlags.Initialize,
            /* RightRotate */ OperatorFlags.Core | OperatorFlags.NonStandard | OperatorFlags.Bitwise,
            /* RightShift */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.Bitwise,
            /* StringEqual */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.String,
            /* StringGreaterThan */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.String,
            /* StringGreaterThanOrEqualTo */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.String,
            /* StringLessThan */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.String,
            /* StringLessThanOrEqualTo */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.String,
            /* StringNotEqual */ OperatorFlags.Core | OperatorFlags.Standard | OperatorFlags.String,
            /* VariableAssignment */ OperatorFlags.Core | OperatorFlags.NonStandard | OperatorFlags.Assignment
        };

        ///////////////////////////////////////////////////////////////////////

        private static Lexeme[] operatorLexemes = {
            /* BitwiseAnd */ Lexeme.BitwiseAnd,
            /* BitwiseEqv */ Lexeme.BitwiseEqv,
            /* BitwiseImp */ Lexeme.BitwiseImp,
            /* BitwiseNot */ Lexeme.BitwiseNot,
            /* BitwiseOr */ Lexeme.BitwiseOr,
            /* BitwiseXor */ Lexeme.BitwiseXor,
            /* Divide */ Lexeme.Divide,
            /* Equal */ Lexeme.Equal,
            /* Exponent */ Lexeme.Exponent,
            /* GreaterThan */ Lexeme.GreaterThan,
            /* GreaterThanOrEqualTo */ Lexeme.GreaterThanOrEqualTo,
            /* LeftRotate */ Lexeme.LeftRotate,
            /* LeftShift */ Lexeme.LeftShift,
            /* LessThan */ Lexeme.LessThan,
            /* LessThanOrEqualTo */ Lexeme.LessThanOrEqualTo,
            /* ListIn */ Lexeme.ListIn,
            /* ListNotIn */ Lexeme.ListNotIn,
            /* LogicalAnd */ Lexeme.LogicalAnd,
            /* LogicalEqv */ Lexeme.LogicalEqv,
            /* LogicalImp */ Lexeme.LogicalImp,
            /* LogicalNot */ Lexeme.LogicalNot,
            /* LogicalOr */ Lexeme.LogicalOr,
            /* LogicalXor */ Lexeme.LogicalXor,
            /* Minus */ Lexeme.Minus,
            /* Modulus */ Lexeme.Modulus,
            /* Multiply */ Lexeme.Multiply,
            /* NotEqual */ Lexeme.NotEqual,
            /* Plus */ Lexeme.Plus,
            /* Question */ Lexeme.Question,
            /* RightRotate */ Lexeme.RightRotate,
            /* RightShift */ Lexeme.RightShift,
            /* StringEqual */ Lexeme.StringEqual,
            /* StringGreaterThan */ Lexeme.StringGreaterThan,
            /* StringGreaterThanOrEqualTo */ Lexeme.StringGreaterThanOrEqualTo,
            /* StringLessThan */ Lexeme.StringLessThan,
            /* StringLessThanOrEqualTo */ Lexeme.StringLessThanOrEqualTo,
            /* StringNotEqual */ Lexeme.StringNotEqual,
            /* VariableAssignment */ Lexeme.VariableAssignment
        };

        ///////////////////////////////////////////////////////////////////////

        private static Arity[] operatorOperands = {
            /* BitwiseAnd */ Arity.Binary,
            /* BitwiseEqv */ Arity.Binary,
            /* BitwiseImp */ Arity.Binary,
            /* BitwiseNot */ Arity.Unary,
            /* BitwiseOr */ Arity.Binary,
            /* BitwiseXor */ Arity.Binary,
            /* Divide */ Arity.Binary,
            /* Equal */ Arity.Binary,
            /* Exponent */ Arity.Binary,
            /* GreaterThan */ Arity.Binary,
            /* GreaterThanOrEqualTo */ Arity.Binary,
            /* LeftRotate */ Arity.Binary,
            /* LeftShift */ Arity.Binary,
            /* LessThan */ Arity.Binary,
            /* LessThanOrEqualTo */ Arity.Binary,
            /* ListIn */ Arity.Binary,
            /* ListNotIn */ Arity.Binary,
            /* LogicalAnd */ Arity.Binary,
            /* LogicalEqv */ Arity.Binary,
            /* LogicalImp */ Arity.Binary,
            /* LogicalNot */ Arity.Unary,
            /* LogicalOr */ Arity.Binary,
            /* LogicalXor */ Arity.Binary,
            /* Minus */ Arity.UnaryAndBinary,
            /* Modulus */ Arity.Binary,
            /* Multiply */ Arity.Binary,
            /* NotEqual */ Arity.Binary,
            /* Plus */ Arity.UnaryAndBinary,
            /* Question */ Arity.Ternary,
            /* RightRotate */ Arity.Binary,
            /* RightShift */ Arity.Binary,
            /* StringEqual */ Arity.Binary,
            /* StringGreaterThan */ Arity.Binary,
            /* StringGreaterThanOrEqualTo */ Arity.Binary,
            /* StringLessThan */ Arity.Binary,
            /* StringLessThanOrEqualTo */ Arity.Binary,
            /* StringNotEqual */ Arity.Binary,
            /* VariableAssignment */ Arity.Binary
        };

        ///////////////////////////////////////////////////////////////////////

        private static string[] operatorNames = {
            /* BitwiseAnd */ Operators.BitwiseAnd,
            /* BitwiseEqv */ Operators.BitwiseEqv,
            /* BitwiseImp */ Operators.BitwiseImp,
            /* BitwiseNot */ Operators.BitwiseNot,
            /* BitwiseOr */ Operators.BitwiseOr,
            /* BitwiseXor */ Operators.BitwiseXor,
            /* Divide */ Operators.Divide,
            /* Equal */ Operators.Equal,
            /* Exponent */ Operators.Exponent,
            /* GreaterThan */ Operators.GreaterThan,
            /* GreaterThanOrEqualTo */ Operators.GreaterThanOrEqualTo,
            /* LeftRotate */ Operators.LeftRotate,
            /* LeftShift */ Operators.LeftShift,
            /* LessThan */ Operators.LessThan,
            /* LessThanOrEqualTo */ Operators.LessThanOrEqualTo,
            /* ListIn */ Operators.ListIn,
            /* ListNotIn */ Operators.ListNotIn,
            /* LogicalAnd */ Operators.LogicalAnd,
            /* LogicalEqv */ Operators.LogicalEqv,
            /* LogicalImp */ Operators.LogicalImp,
            /* LogicalNot */ Operators.LogicalNot,
            /* LogicalOr */ Operators.LogicalOr,
            /* LogicalXor */ Operators.LogicalXor,
            /* Minus */ Operators.Minus,
            /* Modulus */ Operators.Modulus,
            /* Multiply */ Operators.Multiply,
            /* NotEqual */ Operators.NotEqual,
            /* Plus */ Operators.Plus,
            /* Question */ Operators.Question,
            /* RightRotate */ Operators.RightRotate,
            /* RightShift */ Operators.RightShift,
            /* StringEqual */ Operators.StringEqual,
            /* StringGreaterThan */ Operators.StringGreaterThan,
            /* StringGreaterThanOrEqualTo */ Operators.StringGreaterThanOrEqualTo,
            /* StringLessThan */ Operators.StringLessThan,
            /* StringLessThanOrEqualTo */ Operators.StringLessThanOrEqualTo,
            /* StringNotEqual */ Operators.StringNotEqual,
            /* VariableAssignment */ Operators.VariableAssignment
        };

        ///////////////////////////////////////////////////////////////////////

        private static string[] operatorGroups = {
            /* BitwiseAnd */ "bitwise",
            /* BitwiseEqv */ "bitwise",
            /* BitwiseImp */ "bitwise",
            /* BitwiseNot */ "bitwise",
            /* BitwiseOr */ "bitwise",
            /* BitwiseXor */ "bitwise",
            /* Divide */ "arithmetic",
            /* Equal */ "equality",
            /* Exponent */ "exponential",
            /* GreaterThan */ "inequality",
            /* GreaterThanOrEqualTo */ "inequality",
            /* LeftRotate */ "bitwise",
            /* LeftShift */ "bitwise",
            /* LessThan */ "inequality",
            /* LessThanOrEqualTo */ "inequality",
            /* ListIn */ "membership",
            /* ListNotIn */ "membership",
            /* LogicalAnd */ "logical",
            /* LogicalEqv */ "logical",
            /* LogicalImp */ "logical",
            /* LogicalNot */ "logical",
            /* LogicalOr */ "logical",
            /* LogicalXor */ "logical",
            /* Minus */ "arithmetic",
            /* Modulus */ "arithmetic",
            /* Multiply */ "arithmetic",
            /* NotEqual */ "inequation",
            /* Plus */ "arithmetic",
            /* Question */ "conditional",
            /* RightRotate */ "bitwise",
            /* RightShift */ "bitwise",
            /* StringEqual */ "equality",
            /* StringGreaterThan */ "inequality",
            /* StringGreaterThanOrEqualTo */ "inequality",
            /* StringLessThan */ "inequality",
            /* StringLessThanOrEqualTo */ "inequality",
            /* StringNotEqual */ "inequation",
            /* VariableAssignment */ "assignment"
        };

        ///////////////////////////////////////////////////////////////////////

        private static TypeListFlags[] operatorTypeListFlags = {
            /* BitwiseAnd */ TypeListFlags.IntegralTypes,
            /* BitwiseEqv */ TypeListFlags.IntegralTypes,
            /* BitwiseImp */ TypeListFlags.IntegralTypes,
            /* BitwiseNot */ TypeListFlags.IntegralTypes,
            /* BitwiseOr */ TypeListFlags.IntegralTypes,
            /* BitwiseXor */ TypeListFlags.IntegralTypes,
            /* Divide */ TypeListFlags.NumberTypes,
            /* Equal */ TypeListFlags.AllTypes,
            /* Exponent */ TypeListFlags.NumberTypes,
            /* GreaterThan */ TypeListFlags.AllTypes,
            /* GreaterThanOrEqualTo */ TypeListFlags.AllTypes,
            /* LeftRotate */ TypeListFlags.IntegralTypes,
            /* LeftShift */ TypeListFlags.IntegralTypes,
            /* LessThan */ TypeListFlags.AllTypes,
            /* LessThanOrEqualTo */ TypeListFlags.AllTypes,
            /* ListIn */ TypeListFlags.AllTypes,
            /* ListNotIn */ TypeListFlags.AllTypes,
            /* LogicalAnd */ TypeListFlags.NumberTypes,
            /* LogicalEqv */ TypeListFlags.NumberTypes,
            /* LogicalImp */ TypeListFlags.NumberTypes,
            /* LogicalNot */ TypeListFlags.NumberTypes,
            /* LogicalOr */ TypeListFlags.NumberTypes,
            /* LogicalXor */ TypeListFlags.NumberTypes,
            /* Minus */ TypeListFlags.NumberTypes,
            /* Modulus */ TypeListFlags.IntegralTypes,
            /* Multiply */ TypeListFlags.NumberTypes,
            /* NotEqual */ TypeListFlags.AllTypes,
            /* Plus */ TypeListFlags.NumberTypes,
            /* Question */ TypeListFlags.None,
            /* RightRotate */ TypeListFlags.IntegralTypes,
            /* RightShift */ TypeListFlags.IntegralTypes,
            /* StringEqual */ TypeListFlags.AllTypes,
            /* StringGreaterThan */ TypeListFlags.AllTypes,
            /* StringGreaterThanOrEqualTo */ TypeListFlags.AllTypes,
            /* StringLessThan */ TypeListFlags.AllTypes,
            /* StringLessThanOrEqualTo */ TypeListFlags.AllTypes,
            /* StringNotEqual */ TypeListFlags.AllTypes,
            /* VariableAssignment */ TypeListFlags.AllTypes
        };
        #endregion
        #endregion

        ///////////////////////////////////////////////////////////////////////

        #region Public Methods
        //
        // NOTE: This method cannot really "fail", per se, because callers
        //       could just fallback to querying the core library assembly
        //       directly.
        //
        public static bool GetCommands(
            ref int length,           /* out */
            ref Type[] types,         /* out */
            ref Guid?[] ids,          /* out */
            ref CommandFlags[] flags, /* out */
            ref string[] names,       /* out */
            ref string[] groups       /* out */
            )
        {
            lock (syncRoot) /* TRANSACTIONAL */
            {
                if ((commandTypes == null) ||
                    (commandIds == null) ||
                    (commandFlags == null) ||
                    (commandNames == null) ||
                    (commandGroups == null))
                {
                    return false;
                }

                length = commandTypes.Length;

                if ((length == 0) ||
                    (length != commandIds.Length) ||
                    (length != commandFlags.Length) ||
                    (length != commandNames.Length) ||
                    (length != commandGroups.Length))
                {
                    return false;
                }

                types = commandTypes;
                ids = commandIds;
                flags = commandFlags;
                names = commandNames;
                groups = commandGroups;

                return true;
            }
        }

        ///////////////////////////////////////////////////////////////////////

        //
        // NOTE: This method cannot really "fail", per se, because callers
        //       could just fallback to querying the core library assembly
        //       directly.
        //
        public static bool GetFunctions(
            ref int length,                   /* out */
            ref Type[] types,                 /* out */
            ref Guid?[] ids,                  /* out */
            ref FunctionFlags[] flags,        /* out */
            ref Arity[] arguments,            /* out */
            ref string[] names,               /* out */
            ref string[] groups,              /* out */
            ref TypeListFlags[] typeListFlags /* out */
            )
        {
            lock (syncRoot) /* TRANSACTIONAL */
            {
                if ((functionTypes == null) ||
                    (functionIds == null) ||
                    (functionFlags == null) ||
                    (functionArguments == null) ||
                    (functionNames == null) ||
                    (functionGroups == null) ||
                    (functionTypeListFlags == null))
                {
                    return false;
                }

                length = functionTypes.Length;

                if ((length == 0) ||
                    (length != functionIds.Length) ||
                    (length != functionFlags.Length) ||
                    (length != functionArguments.Length) ||
                    (length != functionNames.Length) ||
                    (length != functionGroups.Length) ||
                    (length != functionTypeListFlags.Length))
                {
                    return false;
                }

                types = functionTypes;
                ids = functionIds;
                flags = functionFlags;
                arguments = functionArguments;
                names = functionNames;
                groups = functionGroups;
                typeListFlags = functionTypeListFlags;

                return true;
            }
        }

        ///////////////////////////////////////////////////////////////////////

        //
        // NOTE: This method cannot really "fail", per se, because callers
        //       could just fallback to querying the core library assembly
        //       directly.
        //
        public static bool GetOperators(
            ref int length,                   /* out */
            ref Type[] types,                 /* out */
            ref Guid?[] ids,                  /* out */
            ref OperatorFlags[] flags,        /* out */
            ref Lexeme[] lexemes,             /* out */
            ref Arity[] operands,             /* out */
            ref string[] names,               /* out */
            ref string[] groups,              /* out */
            ref TypeListFlags[] typeListFlags /* out */
            )
        {
            lock (syncRoot) /* TRANSACTIONAL */
            {
                if ((operatorTypes == null) ||
                    (operatorIds == null) ||
                    (operatorFlags == null) ||
                    (operatorLexemes == null) ||
                    (operatorOperands == null) ||
                    (operatorNames == null) ||
                    (operatorGroups == null) ||
                    (operatorTypeListFlags == null))
                {
                    return false;
                }

                length = operatorTypes.Length;

                if ((length == 0) ||
                    (length != operatorIds.Length) ||
                    (length != operatorFlags.Length) ||
                    (length != operatorLexemes.Length) ||
                    (length != operatorOperands.Length) ||
                    (length != operatorNames.Length) ||
                    (length != operatorGroups.Length) ||
                    (length != operatorTypeListFlags.Length))
                {
                    return false;
                }

                types = operatorTypes;
                ids = operatorIds;
                flags = operatorFlags;
                lexemes = operatorLexemes;
                operands = operatorOperands;
                names = operatorNames;
                groups = operatorGroups;
                typeListFlags = operatorTypeListFlags;

                return true;
            }
        }
        #endregion
    }
}
